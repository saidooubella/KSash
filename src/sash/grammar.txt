
statements          : declaration*

declaration         : variable-dec
                    | record-dec
                    | fun-dec
                    | statement

variable-dec        : ('let' | 'def') identifier (':' type)? = expression

fun-dec             : 'fun' (type '.')? identifier '(' fun-params? ')' (':' type)? block

fun-params          : param (',' param)* ','?

param               : identifier ':' type

record-dec          : 'record' identifier '{' record-field* '}'

record-field        : identifier ':' type

statement           : do-while-statement
                    | defer-statement
                    | while-statement
                    | if-statement
                    | expression
                    | block

do-while-statement  : 'do' statement 'while' '(' expression ')'

defer-statement     : 'defer' statement

while-statement     : 'while' '(' expression ')' statement

if-statement        : 'if' '(' expression ')' statement ('else' statement)?

block               : '{' statements '}'

expression          : assignment

assignment          : ternary (('=') assignment)?

ternary             : disjunction '?' ternary ':' ternary

disjunction         : conjunction (('||') conjunction)*

conjunction         : equality (('&&') equality)*

equality            : comparison (('==' | '!=') comparison)*

comparison          : additive (('>' | '>=' | '<' | '<=') additive)*

additive            : multiplicative (('+' | '-') multiplicative)*

multiplicative      : type-casting (('*' | '/') type-casting)*

type-casting        : unary 'as' type

unary               : ('+' | '-') unary
                    | postfix

postfix             : primary (indexing | access | call)*

indexing            : '[' expression ']'

access              : '.' identifier

primary             : creator-expression
                    | parent-expression
                    | tuple-expression
                    | jump-expression
                    | none-expression
                    | list-expression
                    | self-expression
                    | fun-expression
                    | try-expression
                    | map-expression
                    | set-expression
                    | boolean-literal
                    | double-literal
                    | string-literal
                    | float-literal
                    | long-literal
                    | int-literal
                    | identifier

tuple-expression    : '(' tuple-elements? ')'

tuple-elements      : expression (',' | ((',' expression)* ','?))

list-expression     : '[' (expression (',' expression)* ','?)? ']'

set-expression      : '{' (expression (',' expression)* ','?)? '}'

map-expression      : '{' map-elements? '}'

map-elements        : map-element (',' map-element)* ','?

map-element         : expression ':' expression

creator-expression  : 'new' identifier call

call                : '(' arguments? ')'

arguments           : expression (',' expression)* ','?

fun-expression      : fun '(' fun-params? ')' (':' type)? block

parent-expression   : '(' expression ')'

none-expression     : 'none'

self-expression     : 'self'

try-expression      : 'try' expression

jump-expression     : 'return' expression?
                    | 'panic' expression
                    | 'continue'
                    | 'break'

boolean-literal     : 'true'
                    | 'false'

int-literal         : [0-9]+

string-literal      : '"' [^('"'|'\n'|'\r\n')] '"'

long-literal        : [0-9]+ ('l'|'L')

float-literal       : [0-9]+ ('.' [0-9]+)? ('f'|'F')

double-literal      : [0-9]+ '.' [0-9]+

type                : union-type

union-type          : postfix-type ('|' postfix-type)*

postfix-type        : primary-type ('[]' | '{}' | '{' type '}')*

primary-type        : identifier
                    | '(' arg-types? ')' '->' type
                    | '(' type ')'

arg-types           : type (',' type)* ','?

identifier          : letters | '$' | '_' (letters | digits | '$' | '_')*

letters             : ???

digits              : ???
































####################################################################

trait Stringer {
    fun string(): string
}

fun string.string(): string { return self }

let str: Stringer = "Hello" // - string has the "string(): string" method
                            //   thus it fulfill the Stringer trait.

####################################################################

'from' Helper <statement>

'for' '('<name> 'in' <expression>')' <statement>

'trait' <name> '{' <function-signature>+ '}'

####################################################################
